services:
  web:
    build: frontend

    command: npm run dev
    environment:
      - NEXT_SKIP_TURBOPACK=1

    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app-net

  api:
    build: api
    volumes:
      - ./api:/usr/src/api
    command: node server.mjs
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9004:9004"
      - "9005:9005"
    env_file:
      - ./api/.env
    networks:
      - app-net


  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-net

  db:
    image: "postgres:latest"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: movies_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    # volumes:
    #   - pgdata:/var/lib/postgresql/data
    networks:
      - app-net

  adminer:
    image: adminer
    restart: always
    networks:
      - app-net
  # cloudflare-tunnel:
  #   image: cloudflare/cloudflared:latest
  #   command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_KEY}
  #   restart: unless-stopped
  #   volumes:
  #     - ~/.cloudflared:/etc/cloudflared
  #   depends_on:
  #     - web
  #   networks:
  #     - app-net
networks:
  app-net:
    driver: bridge

volumes:
  pgdata:
